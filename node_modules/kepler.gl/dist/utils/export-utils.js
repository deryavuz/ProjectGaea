"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isMSEdge = isMSEdge;
exports.getScaleFromImageSize = getScaleFromImageSize;
exports.calculateExportImageSize = calculateExportImageSize;
exports.convertToPng = convertToPng;
exports.dataURItoBlob = dataURItoBlob;
exports.downloadFile = downloadFile;
exports.exportImage = exportImage;
exports.exportToJsonString = exportToJsonString;
exports.getMapJSON = getMapJSON;
exports.exportJson = exportJson;
exports.exportHtml = exportHtml;
exports.exportData = exportData;
exports.exportMap = exportMap;
exports["default"] = exports.DEFAULT_EXPORT_JSON_SETTINGS = exports.DEFAULT_DATA_NAME = exports.DEFAULT_JSON_NAME = exports.DEFAULT_HTML_NAME = exports.DEFAULT_IMAGE_NAME = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _domToImage = _interopRequireDefault(require("./dom-to-image"));

var _window = require("global/window");

var _defaultSettings = require("../constants/default-settings");

var _exportMapHtml = require("../templates/export-map-html");

var _dataProcessor = require("../processors/data-processor");

var _lodash = _interopRequireDefault(require("lodash.get"));

var _utils = require("./utils");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * Default file names
 */
var DEFAULT_IMAGE_NAME = 'kepler-gl.png';
exports.DEFAULT_IMAGE_NAME = DEFAULT_IMAGE_NAME;
var DEFAULT_HTML_NAME = 'kepler.gl.html';
exports.DEFAULT_HTML_NAME = DEFAULT_HTML_NAME;
var DEFAULT_JSON_NAME = 'keplergl.json';
exports.DEFAULT_JSON_NAME = DEFAULT_JSON_NAME;
var DEFAULT_DATA_NAME = 'kepler-gl';
/**
 * Default json export settings
 * @type {{hasData: boolean}}
 */

exports.DEFAULT_DATA_NAME = DEFAULT_DATA_NAME;
var DEFAULT_EXPORT_JSON_SETTINGS = {
  hasData: true
};
exports.DEFAULT_EXPORT_JSON_SETTINGS = DEFAULT_EXPORT_JSON_SETTINGS;

var defaultResolution = _defaultSettings.EXPORT_IMG_RESOLUTION_OPTIONS.find(function (op) {
  return op.id === _defaultSettings.RESOLUTIONS.ONE_X;
});

var defaultRatio = _defaultSettings.EXPORT_IMG_RATIO_OPTIONS.find(function (op) {
  return op.id === _defaultSettings.EXPORT_IMG_RATIOS.FOUR_BY_THREE;
});

function isMSEdge(window) {
  return Boolean(window.navigator && window.navigator.msSaveOrOpenBlob);
}

function getScaleFromImageSize() {
  var imageW = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  var imageH = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var mapW = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  var mapH = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;

  if ([imageW, imageH, mapW, mapH].some(function (d) {
    return d <= 0;
  })) {
    return 1;
  }

  var base = imageW / imageH > 1 ? imageW : imageH;
  var mapBase = imageW / imageH > 1 ? mapW : mapH;
  return base / mapBase;
}

function calculateExportImageSize(_ref) {
  var mapW = _ref.mapW,
      mapH = _ref.mapH,
      ratio = _ref.ratio,
      resolution = _ref.resolution;

  if (mapW <= 0 || mapH <= 0) {
    return null;
  }

  var ratioItem = _defaultSettings.EXPORT_IMG_RATIO_OPTIONS.find(function (op) {
    return op.id === ratio;
  }) || defaultRatio;
  var resolutionItem = _defaultSettings.EXPORT_IMG_RESOLUTION_OPTIONS.find(function (op) {
    return op.id === resolution;
  }) || defaultResolution;

  var _resolutionItem$getSi = resolutionItem.getSize(mapW, mapH),
      scaledWidth = _resolutionItem$getSi.width,
      scaledHeight = _resolutionItem$getSi.height;

  var _ratioItem$getSize = ratioItem.getSize(scaledWidth, scaledHeight),
      imageW = _ratioItem$getSize.width,
      imageH = _ratioItem$getSize.height;

  var _ref2 = ratioItem.id === _defaultSettings.EXPORT_IMG_RATIOS.CUSTOM ? {} : resolutionItem,
      scale = _ref2.scale;

  return {
    scale: scale,
    imageW: imageW,
    imageH: imageH
  };
}

function convertToPng(sourceElem, options) {
  return _domToImage["default"].toPng(sourceElem, options);
}

function dataURItoBlob(dataURI) {
  var binary = (0, _window.atob)(dataURI.split(',')[1]); // separate out the mime component

  var mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0]; // write the bytes of the string to an ArrayBuffer

  var ab = new _window.ArrayBuffer(binary.length); // create a view into the buffer

  var ia = new _window.Uint8Array(ab);

  for (var i = 0; i < binary.length; i++) {
    ia[i] = binary.charCodeAt(i);
  }

  return new _window.Blob([ab], {
    type: mimeString
  });
}

function downloadFile(fileBlob, fileName) {
  if (isMSEdge(window)) {
    window.navigator.msSaveOrOpenBlob(fileBlob, fileName);
  } else {
    var url = _window.URL.createObjectURL(fileBlob);

    var link = _window.document.createElement('a');

    link.setAttribute('href', url);
    link.setAttribute('download', fileName);

    _window.document.body.appendChild(link);

    link.click();

    _window.document.body.removeChild(link);

    _window.URL.revokeObjectURL(url);
  }
}

function exportImage(state) {
  var imageDataUri = state.uiState.exportImage.imageDataUri;

  if (imageDataUri) {
    var file = dataURItoBlob(imageDataUri);
    downloadFile(file, DEFAULT_IMAGE_NAME);
  }
}

function exportToJsonString(data) {
  try {
    return JSON.stringify(data);
  } catch (e) {
    return e.description;
  }
}

function getMapJSON(state) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_EXPORT_JSON_SETTINGS;
  var hasData = options.hasData;
  var schema = state.visState.schema;

  if (!hasData) {
    return schema.getConfigToSave(state);
  }

  var mapToSave = schema.save(state); // add file name if title is not provided

  var title = (0, _lodash["default"])(mapToSave, ['info', 'title']);

  if (!title || !title.length) {
    mapToSave = (0, _utils.set)(['info', 'title'], "keplergl_".concat((0, _utils.generateHashId)(6)), mapToSave);
  }

  return mapToSave;
}

function exportJson(state) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var map = getMapJSON(state, options);
  var fileBlob = new _window.Blob([exportToJsonString(map)], {
    type: 'application/json'
  });
  downloadFile(fileBlob, DEFAULT_JSON_NAME);
}

function exportHtml(state, options) {
  var userMapboxToken = options.userMapboxToken,
      exportMapboxAccessToken = options.exportMapboxAccessToken,
      mode = options.mode;

  var data = _objectSpread(_objectSpread({}, getMapJSON(state)), {}, {
    mapboxApiAccessToken: (userMapboxToken || '') !== '' ? userMapboxToken : exportMapboxAccessToken,
    mode: mode
  });

  var fileBlob = new _window.Blob([(0, _exportMapHtml.exportMapToHTML)(data)], {
    type: 'text/html'
  });
  downloadFile(fileBlob, DEFAULT_HTML_NAME);
}

function exportData(state, option) {
  var visState = state.visState;
  var datasets = visState.datasets;
  var selectedDataset = option.selectedDataset,
      dataType = option.dataType,
      filtered = option.filtered; // get the selected data

  var filename = DEFAULT_DATA_NAME;
  var selectedDatasets = datasets[selectedDataset] ? [datasets[selectedDataset]] : Object.values(datasets);

  if (!selectedDatasets.length) {
    // error: selected dataset not found.
    return;
  }

  selectedDatasets.forEach(function (selectedData) {
    var allData = selectedData.allData,
        fields = selectedData.fields,
        label = selectedData.label,
        _selectedData$filtere = selectedData.filteredIdxCPU,
        filteredIdxCPU = _selectedData$filtere === void 0 ? [] : _selectedData$filtere;
    var toExport = filtered ? filteredIdxCPU.map(function (i) {
      return allData[i];
    }) : allData; // start to export data according to selected data type

    switch (dataType) {
      case _defaultSettings.EXPORT_DATA_TYPE.CSV:
        {
          var csv = (0, _dataProcessor.formatCsv)(toExport, fields);
          var fileBlob = new _window.Blob([csv], {
            type: 'text/csv'
          });
          downloadFile(fileBlob, "".concat(filename, "_").concat(label, ".csv"));
          break;
        }
      // TODO: support more file types.

      default:
        break;
    }
  });
}

function exportMap(state, option) {
  var imageDataUri = state.uiState.exportImage.imageDataUri;
  var thumbnail = imageDataUri ? dataURItoBlob(imageDataUri) : null;
  var mapToSave = getMapJSON(state, option);
  return {
    map: mapToSave,
    thumbnail: thumbnail
  };
}

var exporters = {
  exportImage: exportImage,
  exportJson: exportJson,
  exportHtml: exportHtml,
  exportData: exportData
};
var _default = exporters;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,