"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _checkbox = _interopRequireDefault(require("./checkbox"));

var _utils = require("../../utils/utils");

function _templateObject() {
  var data = (0, _taggedTemplateLiteral2["default"])(["\n  padding: 12px;\n\n  .map-layer-selector__item {\n    margin: 12px 0;\n  }\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

var propTypes = {
  // Required
  layers: _propTypes["default"].arrayOf(_propTypes["default"].object).isRequired,
  onMapToggleLayer: _propTypes["default"].func.isRequired
};

var MapLayerSelect = _styledComponents["default"].div(_templateObject());

var MapLayerSelector = function MapLayerSelector(_ref) {
  var layers = _ref.layers,
      onMapToggleLayer = _ref.onMapToggleLayer;
  return /*#__PURE__*/_react["default"].createElement(MapLayerSelect, {
    className: "map-layer-selector"
  }, layers.map(function (layer, index) {
    return /*#__PURE__*/_react["default"].createElement("div", {
      key: layer.id,
      className: "map-layer-selector__item"
    }, /*#__PURE__*/_react["default"].createElement(_checkbox["default"], {
      type: "radio",
      checked: layer.isVisible,
      id: "".concat(layer.id, "-toggle-").concat((0, _utils.generateHashId)(4)),
      label: layer.name,
      onChange: function onChange(e) {
        e.preventDefault();
        onMapToggleLayer(layer.id);
      }
    }));
  }));
};

MapLayerSelector.propTypes = propTypes;
var _default = MapLayerSelector;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL2NvbW1vbi9tYXAtbGF5ZXItc2VsZWN0b3IuanMiXSwibmFtZXMiOlsicHJvcFR5cGVzIiwibGF5ZXJzIiwiUHJvcFR5cGVzIiwiYXJyYXlPZiIsIm9iamVjdCIsImlzUmVxdWlyZWQiLCJvbk1hcFRvZ2dsZUxheWVyIiwiZnVuYyIsIk1hcExheWVyU2VsZWN0Iiwic3R5bGVkIiwiZGl2IiwiTWFwTGF5ZXJTZWxlY3RvciIsIm1hcCIsImxheWVyIiwiaW5kZXgiLCJpZCIsImlzVmlzaWJsZSIsIm5hbWUiLCJlIiwicHJldmVudERlZmF1bHQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBb0JBOztBQUNBOztBQUNBOztBQUVBOztBQUNBOzs7Ozs7Ozs7Ozs7QUFFQSxJQUFNQSxTQUFTLEdBQUc7QUFDaEI7QUFDQUMsRUFBQUEsTUFBTSxFQUFFQyxzQkFBVUMsT0FBVixDQUFrQkQsc0JBQVVFLE1BQTVCLEVBQW9DQyxVQUY1QjtBQUdoQkMsRUFBQUEsZ0JBQWdCLEVBQUVKLHNCQUFVSyxJQUFWLENBQWVGO0FBSGpCLENBQWxCOztBQU1BLElBQU1HLGNBQWMsR0FBR0MsNkJBQU9DLEdBQVYsbUJBQXBCOztBQVFBLElBQU1DLGdCQUFnQixHQUFHLFNBQW5CQSxnQkFBbUI7QUFBQSxNQUFFVixNQUFGLFFBQUVBLE1BQUY7QUFBQSxNQUFVSyxnQkFBVixRQUFVQSxnQkFBVjtBQUFBLHNCQUN2QixnQ0FBQyxjQUFEO0FBQWdCLElBQUEsU0FBUyxFQUFDO0FBQTFCLEtBQ0dMLE1BQU0sQ0FBQ1csR0FBUCxDQUFXLFVBQUNDLEtBQUQsRUFBUUMsS0FBUjtBQUFBLHdCQUNWO0FBQUssTUFBQSxHQUFHLEVBQUVELEtBQUssQ0FBQ0UsRUFBaEI7QUFBb0IsTUFBQSxTQUFTLEVBQUM7QUFBOUIsb0JBQ0UsZ0NBQUMsb0JBQUQ7QUFDRSxNQUFBLElBQUksRUFBQyxPQURQO0FBRUUsTUFBQSxPQUFPLEVBQUVGLEtBQUssQ0FBQ0csU0FGakI7QUFHRSxNQUFBLEVBQUUsWUFBS0gsS0FBSyxDQUFDRSxFQUFYLHFCQUF3QiwyQkFBZSxDQUFmLENBQXhCLENBSEo7QUFJRSxNQUFBLEtBQUssRUFBRUYsS0FBSyxDQUFDSSxJQUpmO0FBS0UsTUFBQSxRQUFRLEVBQUUsa0JBQUFDLENBQUMsRUFBSTtBQUNiQSxRQUFBQSxDQUFDLENBQUNDLGNBQUY7QUFDQWIsUUFBQUEsZ0JBQWdCLENBQUNPLEtBQUssQ0FBQ0UsRUFBUCxDQUFoQjtBQUNEO0FBUkgsTUFERixDQURVO0FBQUEsR0FBWCxDQURILENBRHVCO0FBQUEsQ0FBekI7O0FBbUJBSixnQkFBZ0IsQ0FBQ1gsU0FBakIsR0FBNkJBLFNBQTdCO2VBRWVXLGdCIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSAyMDIwIFViZXIgVGVjaG5vbG9naWVzLCBJbmMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuLy8gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuLy8gaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuLy8gdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuLy8gY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4vLyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4vLyBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4vLyBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbi8vIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuLy8gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuLy8gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbi8vIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbi8vIFRIRSBTT0ZUV0FSRS5cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJztcbi8vIGltcG9ydCBTd2l0Y2ggZnJvbSAnY29tcG9uZW50cy9jb21tb24vc3dpdGNoJztcbmltcG9ydCBDaGVja2JveCBmcm9tICdjb21wb25lbnRzL2NvbW1vbi9jaGVja2JveCc7XG5pbXBvcnQge2dlbmVyYXRlSGFzaElkfSBmcm9tICcuLi8uLi91dGlscy91dGlscyc7XG5cbmNvbnN0IHByb3BUeXBlcyA9IHtcbiAgLy8gUmVxdWlyZWRcbiAgbGF5ZXJzOiBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub2JqZWN0KS5pc1JlcXVpcmVkLFxuICBvbk1hcFRvZ2dsZUxheWVyOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG59O1xuXG5jb25zdCBNYXBMYXllclNlbGVjdCA9IHN0eWxlZC5kaXZgXG4gIHBhZGRpbmc6IDEycHg7XG5cbiAgLm1hcC1sYXllci1zZWxlY3Rvcl9faXRlbSB7XG4gICAgbWFyZ2luOiAxMnB4IDA7XG4gIH1cbmA7XG5cbmNvbnN0IE1hcExheWVyU2VsZWN0b3IgPSAoe2xheWVycywgb25NYXBUb2dnbGVMYXllcn0pID0+IChcbiAgPE1hcExheWVyU2VsZWN0IGNsYXNzTmFtZT1cIm1hcC1sYXllci1zZWxlY3RvclwiPlxuICAgIHtsYXllcnMubWFwKChsYXllciwgaW5kZXgpID0+IChcbiAgICAgIDxkaXYga2V5PXtsYXllci5pZH0gY2xhc3NOYW1lPVwibWFwLWxheWVyLXNlbGVjdG9yX19pdGVtXCI+XG4gICAgICAgIDxDaGVja2JveFxuICAgICAgICAgIHR5cGU9XCJyYWRpb1wiXG4gICAgICAgICAgY2hlY2tlZD17bGF5ZXIuaXNWaXNpYmxlfVxuICAgICAgICAgIGlkPXtgJHtsYXllci5pZH0tdG9nZ2xlLSR7Z2VuZXJhdGVIYXNoSWQoNCl9YH1cbiAgICAgICAgICBsYWJlbD17bGF5ZXIubmFtZX1cbiAgICAgICAgICBvbkNoYW5nZT17ZSA9PiB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBvbk1hcFRvZ2dsZUxheWVyKGxheWVyLmlkKTtcbiAgICAgICAgICB9fVxuICAgICAgICAvPlxuICAgICAgPC9kaXY+XG4gICAgKSl9XG4gIDwvTWFwTGF5ZXJTZWxlY3Q+XG4pO1xuXG5NYXBMYXllclNlbGVjdG9yLnByb3BUeXBlcyA9IHByb3BUeXBlcztcblxuZXhwb3J0IGRlZmF1bHQgTWFwTGF5ZXJTZWxlY3RvcjtcbiJdfQ==