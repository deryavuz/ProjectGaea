"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.StyledFilterHeader = void 0;

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _react = _interopRequireDefault(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _panelHeaderAction = _interopRequireDefault(require("../panel-header-action"));

var _icons = require("../../common/icons");

var _colorUtils = require("../../../utils/color-utils");

var _styledComponents2 = require("../../common/styled-components");

function _templateObject2() {
  var data = (0, _taggedTemplateLiteral2["default"])(["\n  display: flex;\n  flex: 2;\n"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = (0, _taggedTemplateLiteral2["default"])(["\n  cursor: pointer;\n  padding: 10px 12px;\n\n  .field-selector {\n    flex: 2;\n  }\n\n  border-left: 3px solid;\n  ", "\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

var StyledFilterHeader = (0, _styledComponents["default"])(_styledComponents2.StyledPanelHeader)(_templateObject(), function (props) {
  return props.labelRCGColorValues && props.labelRCGColorValues.length > 0 ? "border-image: ".concat((0, _colorUtils.createLinearGradient)('bottom', props.labelRCGColorValues), " 3;") : 'border-color: transparent;';
});
exports.StyledFilterHeader = StyledFilterHeader;

var StyledChildrenContainer = _styledComponents["default"].div(_templateObject2());

FilterPanelHeaderFactory.deps = [_panelHeaderAction["default"]];

function FilterPanelHeaderFactory(PanelHeaderAction) {
  var defaultActionIcons = {
    "delete": _icons.Trash
  };

  var FilterPanelHeader = function FilterPanelHeader(_ref) {
    var children = _ref.children,
        datasets = _ref.datasets,
        allAvailableFields = _ref.allAvailableFields,
        setFilter = _ref.setFilter,
        idx = _ref.idx,
        filter = _ref.filter,
        removeFilter = _ref.removeFilter,
        _ref$actionIcons = _ref.actionIcons,
        actionIcons = _ref$actionIcons === void 0 ? defaultActionIcons : _ref$actionIcons;
    return /*#__PURE__*/_react["default"].createElement(StyledFilterHeader, {
      className: "filter-panel__header",
      labelRCGColorValues: datasets.map(function (d) {
        return d.color;
      })
    }, /*#__PURE__*/_react["default"].createElement(StyledChildrenContainer, null, children), /*#__PURE__*/_react["default"].createElement(PanelHeaderAction, {
      id: filter.id,
      tooltip: "tooltip.delete",
      tooltipType: "error",
      onClick: removeFilter,
      hoverColor: 'errorColor',
      IconComponent: actionIcons["delete"]
    }));
  };

  return FilterPanelHeader;
}

var _default = FilterPanelHeaderFactory;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3NpZGUtcGFuZWwvZmlsdGVyLXBhbmVsL2ZpbHRlci1wYW5lbC1oZWFkZXIuanMiXSwibmFtZXMiOlsiU3R5bGVkRmlsdGVySGVhZGVyIiwiU3R5bGVkUGFuZWxIZWFkZXIiLCJwcm9wcyIsImxhYmVsUkNHQ29sb3JWYWx1ZXMiLCJsZW5ndGgiLCJTdHlsZWRDaGlsZHJlbkNvbnRhaW5lciIsInN0eWxlZCIsImRpdiIsIkZpbHRlclBhbmVsSGVhZGVyRmFjdG9yeSIsImRlcHMiLCJQYW5lbEhlYWRlckFjdGlvbkZhY3RvcnkiLCJQYW5lbEhlYWRlckFjdGlvbiIsImRlZmF1bHRBY3Rpb25JY29ucyIsIlRyYXNoIiwiRmlsdGVyUGFuZWxIZWFkZXIiLCJjaGlsZHJlbiIsImRhdGFzZXRzIiwiYWxsQXZhaWxhYmxlRmllbGRzIiwic2V0RmlsdGVyIiwiaWR4IiwiZmlsdGVyIiwicmVtb3ZlRmlsdGVyIiwiYWN0aW9uSWNvbnMiLCJtYXAiLCJkIiwiY29sb3IiLCJpZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFvQkE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFTyxJQUFNQSxrQkFBa0IsR0FBRyxrQ0FBT0Msb0NBQVAsQ0FBSCxvQkFTM0IsVUFBQUMsS0FBSztBQUFBLFNBQ0xBLEtBQUssQ0FBQ0MsbUJBQU4sSUFBNkJELEtBQUssQ0FBQ0MsbUJBQU4sQ0FBMEJDLE1BQTFCLEdBQW1DLENBQWhFLDJCQUNxQixzQ0FBcUIsUUFBckIsRUFBK0JGLEtBQUssQ0FBQ0MsbUJBQXJDLENBRHJCLFdBRUksNEJBSEM7QUFBQSxDQVRzQixDQUF4Qjs7O0FBZVAsSUFBTUUsdUJBQXVCLEdBQUdDLDZCQUFPQyxHQUFWLG9CQUE3Qjs7QUFLQUMsd0JBQXdCLENBQUNDLElBQXpCLEdBQWdDLENBQUNDLDZCQUFELENBQWhDOztBQUVBLFNBQVNGLHdCQUFULENBQWtDRyxpQkFBbEMsRUFBcUQ7QUFDbkQsTUFBTUMsa0JBQWtCLEdBQUc7QUFDekIsY0FBUUM7QUFEaUIsR0FBM0I7O0FBR0EsTUFBTUMsaUJBQWlCLEdBQUcsU0FBcEJBLGlCQUFvQjtBQUFBLFFBQ3hCQyxRQUR3QixRQUN4QkEsUUFEd0I7QUFBQSxRQUV4QkMsUUFGd0IsUUFFeEJBLFFBRndCO0FBQUEsUUFHeEJDLGtCQUh3QixRQUd4QkEsa0JBSHdCO0FBQUEsUUFJeEJDLFNBSndCLFFBSXhCQSxTQUp3QjtBQUFBLFFBS3hCQyxHQUx3QixRQUt4QkEsR0FMd0I7QUFBQSxRQU14QkMsTUFOd0IsUUFNeEJBLE1BTndCO0FBQUEsUUFPeEJDLFlBUHdCLFFBT3hCQSxZQVB3QjtBQUFBLGdDQVF4QkMsV0FSd0I7QUFBQSxRQVF4QkEsV0FSd0IsaUNBUVZWLGtCQVJVO0FBQUEsd0JBVXhCLGdDQUFDLGtCQUFEO0FBQ0UsTUFBQSxTQUFTLEVBQUMsc0JBRFo7QUFFRSxNQUFBLG1CQUFtQixFQUFFSSxRQUFRLENBQUNPLEdBQVQsQ0FBYSxVQUFBQyxDQUFDO0FBQUEsZUFBSUEsQ0FBQyxDQUFDQyxLQUFOO0FBQUEsT0FBZDtBQUZ2QixvQkFJRSxnQ0FBQyx1QkFBRCxRQUEwQlYsUUFBMUIsQ0FKRixlQUtFLGdDQUFDLGlCQUFEO0FBQ0UsTUFBQSxFQUFFLEVBQUVLLE1BQU0sQ0FBQ00sRUFEYjtBQUVFLE1BQUEsT0FBTyxFQUFDLGdCQUZWO0FBR0UsTUFBQSxXQUFXLEVBQUMsT0FIZDtBQUlFLE1BQUEsT0FBTyxFQUFFTCxZQUpYO0FBS0UsTUFBQSxVQUFVLEVBQUUsWUFMZDtBQU1FLE1BQUEsYUFBYSxFQUFFQyxXQUFXO0FBTjVCLE1BTEYsQ0FWd0I7QUFBQSxHQUExQjs7QUEwQkEsU0FBT1IsaUJBQVA7QUFDRDs7ZUFFY04sd0IiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIDIwMjAgVWJlciBUZWNobm9sb2dpZXMsIEluYy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4vLyBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4vLyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4vLyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbi8vIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4vLyBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuLy8gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuLy8gVEhFIFNPRlRXQVJFLlxuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cyc7XG5pbXBvcnQgUGFuZWxIZWFkZXJBY3Rpb25GYWN0b3J5IGZyb20gJ2NvbXBvbmVudHMvc2lkZS1wYW5lbC9wYW5lbC1oZWFkZXItYWN0aW9uJztcbmltcG9ydCB7VHJhc2h9IGZyb20gJ2NvbXBvbmVudHMvY29tbW9uL2ljb25zJztcbmltcG9ydCB7Y3JlYXRlTGluZWFyR3JhZGllbnR9IGZyb20gJ3V0aWxzL2NvbG9yLXV0aWxzJztcbmltcG9ydCB7U3R5bGVkUGFuZWxIZWFkZXJ9IGZyb20gJ2NvbXBvbmVudHMvY29tbW9uL3N0eWxlZC1jb21wb25lbnRzJztcblxuZXhwb3J0IGNvbnN0IFN0eWxlZEZpbHRlckhlYWRlciA9IHN0eWxlZChTdHlsZWRQYW5lbEhlYWRlcilgXG4gIGN1cnNvcjogcG9pbnRlcjtcbiAgcGFkZGluZzogMTBweCAxMnB4O1xuXG4gIC5maWVsZC1zZWxlY3RvciB7XG4gICAgZmxleDogMjtcbiAgfVxuXG4gIGJvcmRlci1sZWZ0OiAzcHggc29saWQ7XG4gICR7cHJvcHMgPT5cbiAgICBwcm9wcy5sYWJlbFJDR0NvbG9yVmFsdWVzICYmIHByb3BzLmxhYmVsUkNHQ29sb3JWYWx1ZXMubGVuZ3RoID4gMFxuICAgICAgPyBgYm9yZGVyLWltYWdlOiAke2NyZWF0ZUxpbmVhckdyYWRpZW50KCdib3R0b20nLCBwcm9wcy5sYWJlbFJDR0NvbG9yVmFsdWVzKX0gMztgXG4gICAgICA6ICdib3JkZXItY29sb3I6IHRyYW5zcGFyZW50Oyd9XG5gO1xuXG5jb25zdCBTdHlsZWRDaGlsZHJlbkNvbnRhaW5lciA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXg6IDI7XG5gO1xuXG5GaWx0ZXJQYW5lbEhlYWRlckZhY3RvcnkuZGVwcyA9IFtQYW5lbEhlYWRlckFjdGlvbkZhY3RvcnldO1xuXG5mdW5jdGlvbiBGaWx0ZXJQYW5lbEhlYWRlckZhY3RvcnkoUGFuZWxIZWFkZXJBY3Rpb24pIHtcbiAgY29uc3QgZGVmYXVsdEFjdGlvbkljb25zID0ge1xuICAgIGRlbGV0ZTogVHJhc2hcbiAgfTtcbiAgY29uc3QgRmlsdGVyUGFuZWxIZWFkZXIgPSAoe1xuICAgIGNoaWxkcmVuLFxuICAgIGRhdGFzZXRzLFxuICAgIGFsbEF2YWlsYWJsZUZpZWxkcyxcbiAgICBzZXRGaWx0ZXIsXG4gICAgaWR4LFxuICAgIGZpbHRlcixcbiAgICByZW1vdmVGaWx0ZXIsXG4gICAgYWN0aW9uSWNvbnMgPSBkZWZhdWx0QWN0aW9uSWNvbnNcbiAgfSkgPT4gKFxuICAgIDxTdHlsZWRGaWx0ZXJIZWFkZXJcbiAgICAgIGNsYXNzTmFtZT1cImZpbHRlci1wYW5lbF9faGVhZGVyXCJcbiAgICAgIGxhYmVsUkNHQ29sb3JWYWx1ZXM9e2RhdGFzZXRzLm1hcChkID0+IGQuY29sb3IpfVxuICAgID5cbiAgICAgIDxTdHlsZWRDaGlsZHJlbkNvbnRhaW5lcj57Y2hpbGRyZW59PC9TdHlsZWRDaGlsZHJlbkNvbnRhaW5lcj5cbiAgICAgIDxQYW5lbEhlYWRlckFjdGlvblxuICAgICAgICBpZD17ZmlsdGVyLmlkfVxuICAgICAgICB0b29sdGlwPVwidG9vbHRpcC5kZWxldGVcIlxuICAgICAgICB0b29sdGlwVHlwZT1cImVycm9yXCJcbiAgICAgICAgb25DbGljaz17cmVtb3ZlRmlsdGVyfVxuICAgICAgICBob3ZlckNvbG9yPXsnZXJyb3JDb2xvcid9XG4gICAgICAgIEljb25Db21wb25lbnQ9e2FjdGlvbkljb25zLmRlbGV0ZX1cbiAgICAgIC8+XG4gICAgPC9TdHlsZWRGaWx0ZXJIZWFkZXI+XG4gICk7XG5cbiAgcmV0dXJuIEZpbHRlclBhbmVsSGVhZGVyO1xufVxuXG5leHBvcnQgZGVmYXVsdCBGaWx0ZXJQYW5lbEhlYWRlckZhY3Rvcnk7XG4iXX0=