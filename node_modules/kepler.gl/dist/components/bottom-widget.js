"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FilterAnimationControllerFactory = FilterAnimationControllerFactory;
exports.LayerAnimationControllerFactory = LayerAnimationControllerFactory;
exports["default"] = BottomWidgetFactory;

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _timeWidget = _interopRequireDefault(require("./filters/time-widget"));

var _animationControl = _interopRequireDefault(require("./common/animation-control/animation-control"));

var _animationController = _interopRequireDefault(require("./common/animation-control/animation-controller"));

var _constants = require("../constants");

function _templateObject() {
  var data = (0, _taggedTemplateLiteral2["default"])(["\n  position: absolute;\n  display: flex;\n  flex-direction: column;\n  padding-top: ", "px;\n  padding-right: ", "px;\n  padding-bottom: ", "px;\n  padding-left: ", "px;\n  width: ", "px;\n  bottom: 0;\n  right: 0;\n  z-index: 1;\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

var propTypes = {
  filters: _propTypes["default"].arrayOf(_propTypes["default"].object),
  datasets: _propTypes["default"].object,
  uiState: _propTypes["default"].object,
  layers: _propTypes["default"].arrayOf(_propTypes["default"].object),
  animationConfig: _propTypes["default"].object,
  visStateActions: _propTypes["default"].object,
  sidePanelWidth: _propTypes["default"].number,
  containerW: _propTypes["default"].number
};
var maxWidth = 1080;

var BottomWidgetContainer = _styledComponents["default"].div(_templateObject(), function (props) {
  return props.hasPadding ? props.theme.bottomWidgetPaddingTop : 0;
}, function (props) {
  return props.hasPadding ? props.theme.bottomWidgetPaddingRight : 0;
}, function (props) {
  return props.hasPadding ? props.theme.bottomWidgetPaddingBottom : 0;
}, function (props) {
  return props.hasPadding ? props.theme.bottomWidgetPaddingLeft : 0;
}, function (props) {
  return props.width;
});

FilterAnimationControllerFactory.deps = [_animationController["default"]];

function FilterAnimationControllerFactory(AnimationController) {
  var FilterAnimationController = function FilterAnimationController(_ref) {
    var _ref$filter = _ref.filter,
        filter = _ref$filter === void 0 ? {} : _ref$filter,
        filterIdx = _ref.filterIdx,
        setFilterAnimationTime = _ref.setFilterAnimationTime,
        children = _ref.children;
    var intervalBins = (0, _react.useMemo)(function () {
      var bins = filter && filter.bins;
      var interval = filter.plotType && filter.plotType.interval;
      return bins && Object.keys(bins).length && Object.values(bins)[0][interval];
    }, [filter]);
    var steps = (0, _react.useMemo)(function () {
      return intervalBins ? intervalBins.map(function (x) {
        return x.x0;
      }) : null;
    }, [intervalBins]);
    var updateAnimation = (0, _react.useCallback)(function (value) {
      switch (filter.animationWindow) {
        case _constants.ANIMATION_WINDOW.interval:
          var idx = value[1];
          setFilterAnimationTime(filterIdx, 'value', [intervalBins[idx].x0, intervalBins[idx].x1 - 1]);
          break;

        default:
          setFilterAnimationTime(filterIdx, 'value', value);
          break;
      }
    }, [filterIdx, intervalBins, filter.animationWindow, setFilterAnimationTime]);
    return /*#__PURE__*/_react["default"].createElement(AnimationController, {
      key: "filter-control",
      value: filter.value,
      domain: filter.domain,
      speed: filter.speed,
      isAnimating: filter.isAnimating,
      animationWindow: filter.animationWindow,
      steps: steps,
      updateAnimation: updateAnimation,
      children: children
    });
  };

  return FilterAnimationController;
}

LayerAnimationControllerFactory.deps = [_animationController["default"]];

function LayerAnimationControllerFactory(AnimationController) {
  var LayerAnimationController = function LayerAnimationController(_ref2) {
    var animationConfig = _ref2.animationConfig,
        setLayerAnimationTime = _ref2.setLayerAnimationTime,
        children = _ref2.children;
    return /*#__PURE__*/_react["default"].createElement(AnimationController, {
      key: "layer-control",
      value: animationConfig.currentTime,
      domain: animationConfig.domain,
      speed: animationConfig.speed,
      isAnimating: animationConfig.isAnimating,
      updateAnimation: setLayerAnimationTime,
      steps: animationConfig.timeSteps,
      animationWindow: animationConfig.timeSteps ? _constants.ANIMATION_WINDOW.interval : _constants.ANIMATION_WINDOW.point,
      children: children
    });
  };

  return LayerAnimationController;
}

BottomWidgetFactory.deps = [_timeWidget["default"], _animationControl["default"], FilterAnimationControllerFactory, LayerAnimationControllerFactory];

function BottomWidgetFactory(TimeWidget, AnimationControl, FilterAnimationController, LayerAnimationController) {
  var BottomWidget = function BottomWidget(props) {
    var datasets = props.datasets,
        filters = props.filters,
        animationConfig = props.animationConfig,
        visStateActions = props.visStateActions,
        containerW = props.containerW,
        uiState = props.uiState,
        sidePanelWidth = props.sidePanelWidth,
        layers = props.layers;
    var activeSidePanel = uiState.activeSidePanel,
        readOnly = uiState.readOnly;
    var isOpen = Boolean(activeSidePanel);
    var enlargedFilterIdx = (0, _react.useMemo)(function () {
      return filters.findIndex(function (f) {
        return f.enlarged && f.type === _constants.FILTER_TYPES.timeRange;
      });
    }, [filters]);
    var animatedFilter = (0, _react.useMemo)(function () {
      return filters.find(function (f) {
        return f.isAnimating;
      });
    }, [filters]);
    var enlargedFilterWidth = isOpen ? containerW - sidePanelWidth : containerW; // show playback control if layers contain trip layer & at least one trip layer is visible

    var animatableLayer = (0, _react.useMemo)(function () {
      return layers.filter(function (l) {
        return l.config.animation && l.config.animation.enabled && l.config.isVisible;
      });
    }, [layers]);
    var readyToAnimation = Array.isArray(animationConfig.domain) && Number.isFinite(animationConfig.currentTime); // if animation control is showing, hide time display in time slider

    var showFloatingTimeDisplay = !animatableLayer.length;
    var showAnimationControl = animatableLayer.length && readyToAnimation;
    var showTimeWidget = enlargedFilterIdx > -1 && Object.keys(datasets).length > 0;
    return /*#__PURE__*/_react["default"].createElement(BottomWidgetContainer, {
      width: Math.min(maxWidth, enlargedFilterWidth),
      className: "bottom-widget--container",
      hasPadding: showAnimationControl || showTimeWidget
    }, /*#__PURE__*/_react["default"].createElement(LayerAnimationController, {
      animationConfig: animationConfig,
      setLayerAnimationTime: visStateActions.setLayerAnimationTime
    }, function (animationControlProps) {
      return showAnimationControl ? /*#__PURE__*/_react["default"].createElement(AnimationControl, {
        animationConfig: animationConfig,
        setLayerAnimationTime: visStateActions.setLayerAnimationTime,
        updateAnimationSpeed: visStateActions.updateLayerAnimationSpeed,
        toggleAnimation: visStateActions.toggleLayerAnimation,
        isAnimatable: !animatedFilter,
        animationControlProps: animationControlProps
      }) : null;
    }), /*#__PURE__*/_react["default"].createElement(FilterAnimationController
    /* pass if filter is not animating, pass in 
     enlarged filter here because animation controller needs to call reset on it
     we can */
    , {
      filter: animatedFilter || filters[enlargedFilterIdx],
      filterIdx: enlargedFilterIdx,
      setFilterAnimationTime: visStateActions.setFilterAnimationTime
    }, function (animationControlProps) {
      return showTimeWidget ? /*#__PURE__*/_react["default"].createElement(TimeWidget, {
        filter: filters[enlargedFilterIdx],
        index: enlargedFilterIdx,
        isAnyFilterAnimating: Boolean(animatedFilter),
        datasets: datasets,
        readOnly: readOnly,
        showTimeDisplay: showFloatingTimeDisplay,
        setFilterPlot: visStateActions.setFilterPlot,
        setFilter: visStateActions.setFilter,
        setFilterAnimationTime: visStateActions.setFilterAnimationTime,
        setFilterAnimationWindow: visStateActions.setFilterAnimationWindow,
        toggleAnimation: visStateActions.toggleFilterAnimation,
        updateAnimationSpeed: visStateActions.updateFilterAnimationSpeed,
        enlargeFilter: visStateActions.enlargeFilter,
        animationControlProps: animationControlProps,
        isAnimatable: !animationConfig || !animationConfig.isAnimating
      }) : null;
    }));
  };

  BottomWidget.propTypes = propTypes;
  return BottomWidget;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,