{"version":3,"sources":["../../../src/simple-mesh-layer/simple-mesh-layer.js"],"names":["Layer","project32","phongLighting","picking","COORDINATE_SYSTEM","log","Model","Geometry","Texture2D","isWebGL2","hasFeature","FEATURES","MATRIX_ATTRIBUTES","shouldComposeModelMatrix","vs","fs","getTextureFromData","gl","data","opts","Object","assign","validateGeometryAttributes","attributes","useMeshColors","hasColorAttribute","COLOR_0","colors","useColorAttribute","constant","value","Float32Array","assert","positions","POSITION","getGeometry","Error","DEFAULT_COLOR","defaultProps","mesh","type","async","texture","sizeScale","min","_useMeshColors","_instanced","wireframe","material","getPosition","x","position","getColor","getOrientation","getScale","getTranslation","getTransformMatrix","SimpleMeshLayer","getShaders","transpileToGLSL100","context","defines","GLSL_DERIVATIVES","DERIVATIVES_AVAILABLE","modules","initializeState","attributeManager","getAttributeManager","addInstanced","instancePositions","transition","fp64","use64bitPositions","size","accessor","instanceColors","props","colorFormat","length","normalized","defaultValue","instanceModelMatrix","setState","emptyTexture","Uint8Array","width","height","updateState","oldProps","changeFlags","extensionsChanged","state","model","delete","getModel","hasNormals","Boolean","NORMAL","normals","invalidateAll","setTexture","setDrawMode","finalizeState","draw","uniforms","viewport","coordinateSystem","composeModelMatrix","flatShading","id","geometry","isInstanced","setUniforms","sampler","hasTexture","image","layerName"],"mappings":"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","sourcesContent":["// Note: This file will either be moved back to deck.gl or reformatted to web-monorepo standards\n// Disabling lint temporarily to facilitate copying code in and out of this repo\n/* eslint-disable */\n\n// Copyright (c) 2015 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, project32, phongLighting, picking, COORDINATE_SYSTEM, log} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry, Texture2D, isWebGL2} from '@luma.gl/core';\nimport {hasFeature, FEATURES} from '@luma.gl/webgl';\n\nimport {MATRIX_ATTRIBUTES, shouldComposeModelMatrix} from '../utils/matrix';\n\nimport vs from './simple-mesh-layer-vertex.glsl';\nimport fs from './simple-mesh-layer-fragment.glsl';\n\n/*\n * Convert image data into texture\n * @returns {Texture2D} texture\n */\nfunction getTextureFromData(gl, data, opts) {\n  if (data instanceof Texture2D) {\n    return data;\n  }\n  return new Texture2D(gl, Object.assign({data}, opts));\n}\n\nfunction validateGeometryAttributes(attributes, useMeshColors) {\n  const hasColorAttribute = attributes.COLOR_0 || attributes.colors;\n  const useColorAttribute = hasColorAttribute && useMeshColors;\n  if (!useColorAttribute) {\n    attributes.colors = {constant: true, value: new Float32Array([1, 1, 1])};\n  }\n  log.assert(\n    attributes.positions || attributes.POSITION,\n    'SimpleMeshLayer requires \"postions\" or \"POSITION\" attribute in mesh property.'\n  );\n}\n\n/*\n * Convert mesh data into geometry\n * @returns {Geometry} geometry\n */\nfunction getGeometry(data, useMeshColors) {\n  if (data.attributes) {\n    validateGeometryAttributes(data.attributes, useMeshColors);\n    if (data instanceof Geometry) {\n      return data;\n    } else {\n      return new Geometry(data);\n    }\n  } else if (data.positions || data.POSITION) {\n    validateGeometryAttributes(data, useMeshColors);\n    return new Geometry({\n      attributes: data\n    });\n  }\n  throw Error('Invalid mesh');\n}\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\n\nconst defaultProps = {\n  mesh: {value: null, type: 'object', async: true},\n  texture: {type: 'object', value: null, async: true},\n  sizeScale: {type: 'number', value: 1, min: 0},\n  // Whether the color attribute in a mesh will be used\n  // This prop will be removed and set to true in next major release\n  _useMeshColors: {type: 'boolean', value: false},\n\n  // _instanced is a hack to use world position instead of meter offsets in mesh\n  // TODO - formalize API\n  _instanced: true,\n  // NOTE(Tarek): Quick and dirty wireframe. Just draws\n  // the same mesh with LINE_STRIPS. Won't follow edges\n  // of the original mesh.\n  wireframe: false,\n  // Optional material for 'lighting' shader module\n  material: true,\n  getPosition: {type: 'accessor', value: x => x.position},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n\n  // yaw, pitch and roll are in degrees\n  // https://en.wikipedia.org/wiki/Euler_angles\n  // [pitch, yaw, roll]\n  getOrientation: {type: 'accessor', value: [0, 0, 0]},\n  getScale: {type: 'accessor', value: [1, 1, 1]},\n  getTranslation: {type: 'accessor', value: [0, 0, 0]},\n  // 4x4 matrix\n  getTransformMatrix: {type: 'accessor', value: []}\n};\n\nexport default class SimpleMeshLayer extends Layer {\n  getShaders() {\n    const transpileToGLSL100 = !isWebGL2(this.context.gl);\n\n    const defines = {};\n\n    if (hasFeature(this.context.gl, FEATURES.GLSL_DERIVATIVES)) {\n      defines.DERIVATIVES_AVAILABLE = 1;\n    }\n\n    return super.getShaders({\n      vs,\n      fs,\n      modules: [project32, phongLighting, picking],\n      transpileToGLSL100,\n      defines\n    });\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n\n    attributeManager.addInstanced({\n      instancePositions: {\n        transition: true,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        size: 3,\n        accessor: 'getPosition'\n      },\n      instanceColors: {\n        type: GL.UNSIGNED_BYTE,\n        transition: true,\n        size: this.props.colorFormat.length,\n        normalized: true,\n        accessor: 'getColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceModelMatrix: MATRIX_ATTRIBUTES\n    });\n\n    this.setState({\n      // Avoid luma.gl's missing uniform warning\n      // TODO - add feature to luma.gl to specify ignored uniforms?\n      emptyTexture: new Texture2D(this.context.gl, {\n        data: new Uint8Array(4),\n        width: 1,\n        height: 1\n      })\n    });\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n\n    if (props.mesh !== oldProps.mesh || changeFlags.extensionsChanged) {\n      if (this.state.model) {\n        this.state.model.delete();\n      }\n      if (props.mesh) {\n        this.setState({model: this.getModel(props.mesh)});\n\n        const attributes = props.mesh.attributes || props.mesh;\n        this.setState({\n          hasNormals: Boolean(attributes.NORMAL || attributes.normals)\n        });\n      }\n      this.getAttributeManager().invalidateAll();\n    }\n\n    if (props.texture !== oldProps.texture) {\n      this.setTexture(props.texture);\n    }\n\n    if (this.state.model) {\n      this.state.model.setDrawMode(this.props.wireframe ? GL.LINE_STRIP : GL.TRIANGLES);\n    }\n  }\n\n  finalizeState() {\n    super.finalizeState();\n\n    this.state.emptyTexture.delete();\n    if (this.state.texture) {\n      this.state.texture.delete();\n    }\n  }\n\n  draw({uniforms}) {\n    if (!this.state.model) {\n      return;\n    }\n\n    const {viewport} = this.context;\n    const {sizeScale, coordinateSystem, _instanced} = this.props;\n\n    this.state.model.draw({\n      uniforms: Object.assign({}, uniforms, {\n        sizeScale,\n        composeModelMatrix: !_instanced || shouldComposeModelMatrix(viewport, coordinateSystem),\n        flatShading: !this.state.hasNormals\n      })\n    });\n  }\n\n  getModel(mesh) {\n    const model = new Model(\n      this.context.gl,\n      Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: getGeometry(mesh, this.props._useMeshColors),\n        isInstanced: true\n      })\n    );\n\n    const {texture, emptyTexture} = this.state;\n    model.setUniforms({\n      sampler: texture || emptyTexture,\n      hasTexture: Boolean(texture)\n    });\n\n    return model;\n  }\n\n  setTexture(image) {\n    const {gl} = this.context;\n    const {emptyTexture, model} = this.state;\n\n    if (this.state.texture) {\n      this.state.texture.delete();\n    }\n\n    const texture = image ? getTextureFromData(gl, image) : null;\n    this.setState({texture});\n\n    if (model) {\n      // props.mesh may not be ready at this time.\n      // The sampler will be set when `getModel` is called\n      model.setUniforms({\n        sampler: texture || emptyTexture,\n        hasTexture: Boolean(texture)\n      });\n    }\n  }\n}\n\nSimpleMeshLayer.layerName = 'SimpleMeshLayer';\nSimpleMeshLayer.defaultProps = defaultProps;\n"],"file":"simple-mesh-layer.js"}