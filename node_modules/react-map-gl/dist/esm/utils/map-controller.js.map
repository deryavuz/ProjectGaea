{"version":3,"sources":["../../../src/utils/map-controller.js"],"names":["MapState","LinearInterpolator","TransitionManager","TRANSITION_EVENTS","NO_TRANSITION_PROPS","transitionDuration","LINEAR_TRANSITION_PROPS","transitionEasing","t","transitionInterpolator","transitionInterruption","BREAK","DEFAULT_INERTIA","INERTIA_EASING","EVENT_TYPES","WHEEL","PAN","PINCH","TRIPLE_PAN","DOUBLE_TAP","KEYBOARD","MapController","isDragging","newState","Object","assign","_interactionState","onStateChange","newViewport","oldViewport","onViewportChange","handleEvent","bind","_transitionManager","_onTransition","_setInteractionState","event","mapState","getMapState","eventStartBlocked","_eventStartBlocked","type","_onPanStart","_onPan","_onPanEnd","_onPinchStart","_onPinch","_onPinchEnd","_onTriplePanStart","_onTriplePan","_onTriplePanEnd","_onDoubleTap","_onWheel","_onKeyDown","offsetCenter","x","y","srcEvent","Boolean","metaKey","altKey","ctrlKey","shiftKey","timeout","timer","setTimeout","newMapState","extraProps","interactionState","getViewportProps","viewStateChanged","keys","some","key","_state","getState","overrides","mapStateProps","options","eventManager","isInteractive","scrollZoom","dragPan","dragRotate","doubleClickZoom","touchZoom","touchRotate","keyboard","dimensionChanged","height","updateViewport","processViewportChange","_events","toggleEvents","events","eventNames","enabled","forEach","eventName","on","off","pos","getCenter","_panRotate","isFunctionKeyPressed","rightButton","rotateStart","panStart","_onPanRotate","_onPanMove","_onPanRotateEnd","_onPanMoveEnd","pan","isPanning","inertia","velocity","endPos","velocityX","velocityY","newControllerState","panEnd","rotate","isRotating","rotateEnd","speed","smooth","preventDefault","delta","scale","Math","exp","abs","zoom","around","isZooming","zoomStart","_startPinchRotation","rotation","_lastPinchEvent","deltaAngleX","z","log2","velocityZ","deltaTime","endScale","pow","zoomEnd","blockEvents","startPinchRotation","deltaX","isZoomOut","funcKey","zoomSpeed","moveSpeed","rotateSpeedX","rotateSpeedY","keyCode","bearing","startPos","pitch"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 Uber Technologies, Inc.\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* eslint-disable complexity */\nimport MapState from './map-state';\nimport {LinearInterpolator} from './transition';\nimport TransitionManager, {TRANSITION_EVENTS} from './transition-manager';\n\nconst NO_TRANSITION_PROPS = {\n  transitionDuration: 0\n};\nexport const LINEAR_TRANSITION_PROPS = {\n  transitionDuration: 300,\n  transitionEasing: t => t,\n  transitionInterpolator: new LinearInterpolator(),\n  transitionInterruption: TRANSITION_EVENTS.BREAK\n};\n\n// EVENT HANDLING PARAMETERS\nconst DEFAULT_INERTIA = 300;\nconst INERTIA_EASING = t => 1 - (1 - t) * (1 - t);\n\nconst EVENT_TYPES = {\n  WHEEL: ['wheel'],\n  PAN: ['panstart', 'panmove', 'panend'],\n  PINCH: ['pinchstart', 'pinchmove', 'pinchend'],\n  TRIPLE_PAN: ['tripanstart', 'tripanmove', 'tripanend'],\n  DOUBLE_TAP: ['doubletap'],\n  KEYBOARD: ['keydown']\n};\n\n/**\n * @classdesc\n * A class that handles events and updates mercator style viewport parameters\n */\nexport default class MapController {\n  events = [];\n  scrollZoom = true;\n  dragPan = true;\n  dragRotate = true;\n  doubleClickZoom = true;\n  touchZoom = true;\n  touchRotate = false;\n  keyboard = true;\n\n  _interactionState = {\n    isDragging: false\n  };\n  _events = {};\n\n  constructor() {\n    this.handleEvent = this.handleEvent.bind(this);\n    this._transitionManager = new TransitionManager({\n      onViewportChange: this._onTransition,\n      onStateChange: this._setInteractionState\n    });\n  }\n\n  /**\n   * Callback for events\n   * @param {object} event - a mjolnir.js Event\n   */\n  handleEvent(event) {\n    this.mapState = this.getMapState();\n    const eventStartBlocked = this._eventStartBlocked;\n\n    switch (event.type) {\n      case 'panstart':\n        return eventStartBlocked ? false : this._onPanStart(event);\n      case 'panmove':\n        return this._onPan(event);\n      case 'panend':\n        return this._onPanEnd(event);\n      case 'pinchstart':\n        return eventStartBlocked ? false : this._onPinchStart(event);\n      case 'pinchmove':\n        return this._onPinch(event);\n      case 'pinchend':\n        return this._onPinchEnd(event);\n      case 'tripanstart':\n        return eventStartBlocked ? false : this._onTriplePanStart(event);\n      case 'tripanmove':\n        return this._onTriplePan(event);\n      case 'tripanend':\n        return this._onTriplePanEnd(event);\n      case 'doubletap':\n        return this._onDoubleTap(event);\n      case 'wheel':\n        return this._onWheel(event);\n      case 'keydown':\n        return this._onKeyDown(event);\n      default:\n        return false;\n    }\n  }\n\n  /* Event utils */\n  // Event object: http://hammerjs.github.io/api/#event-object\n  getCenter(event) {\n    const {\n      offsetCenter: {x, y}\n    } = event;\n    return [x, y];\n  }\n\n  isFunctionKeyPressed(event) {\n    const {srcEvent} = event;\n    return Boolean(srcEvent.metaKey || srcEvent.altKey || srcEvent.ctrlKey || srcEvent.shiftKey);\n  }\n\n  // When a multi-touch event ends, e.g. pinch, not all pointers are lifted at the same time.\n  // This triggers a brief `pan` event.\n  // Calling this method will temporarily disable *start events to avoid conflicting transitions.\n  blockEvents(timeout) {\n    /* global setTimeout */\n    const timer = setTimeout(() => {\n      if (this._eventStartBlocked === timer) {\n        this._eventStartBlocked = null;\n      }\n    }, timeout);\n    this._eventStartBlocked = timer;\n  }\n\n  /* Callback util */\n  // formats map state and invokes callback function\n  updateViewport(newMapState, extraProps, interactionState) {\n    // Always trigger callback on initial update (resize)\n    const oldViewport = this.mapState ? this.mapState.getViewportProps() : {};\n    const newViewport = {...newMapState.getViewportProps(), ...extraProps};\n\n    const viewStateChanged = Object.keys(newViewport).some(\n      key => oldViewport[key] !== newViewport[key]\n    );\n\n    this._state = newMapState.getState();\n    this._setInteractionState(interactionState);\n\n    // viewState has changed\n    if (viewStateChanged) {\n      this.onViewportChange(newViewport, this._interactionState, oldViewport);\n    }\n  }\n\n  _setInteractionState = newState => {\n    Object.assign(this._interactionState, newState);\n    if (this.onStateChange) {\n      this.onStateChange(this._interactionState);\n    }\n  };\n\n  _onTransition = (newViewport, oldViewport) => {\n    this.onViewportChange(newViewport, this._interactionState, oldViewport);\n  };\n\n  getMapState(overrides) {\n    return new MapState({...this.mapStateProps, ...this._state, ...overrides});\n  }\n\n  isDragging() {\n    return this._interactionState.isDragging;\n  }\n\n  /**\n   * Extract interactivity options\n   */\n  setOptions(options) {\n    const {\n      onViewportChange,\n      onStateChange,\n      eventManager = this.eventManager,\n\n      isInteractive = true,\n      scrollZoom = this.scrollZoom,\n      dragPan = this.dragPan,\n      dragRotate = this.dragRotate,\n      doubleClickZoom = this.doubleClickZoom,\n      touchZoom = this.touchZoom,\n      touchRotate = this.touchRotate,\n      keyboard = this.keyboard\n    } = options;\n\n    this.onViewportChange = onViewportChange;\n    this.onStateChange = onStateChange;\n\n    const dimensionChanged = !this.mapStateProps || this.mapStateProps.height !== options.height;\n\n    this.mapStateProps = options;\n\n    if (dimensionChanged && options.height) {\n      // Dimensions changed, normalize the props\n      this.updateViewport(new MapState(options));\n    }\n    // Update transition\n    this._transitionManager.processViewportChange(options);\n\n    if (this.eventManager !== eventManager) {\n      // EventManager has changed\n      this.eventManager = eventManager;\n      this._events = {};\n      this.toggleEvents(this.events, true);\n    }\n\n    // Register/unregister events\n    this.toggleEvents(EVENT_TYPES.WHEEL, isInteractive && Boolean(scrollZoom));\n    this.toggleEvents(EVENT_TYPES.PAN, isInteractive && Boolean(dragPan || dragRotate));\n    this.toggleEvents(EVENT_TYPES.PINCH, isInteractive && Boolean(touchZoom || touchRotate));\n    this.toggleEvents(EVENT_TYPES.TRIPLE_PAN, isInteractive && Boolean(touchRotate));\n    this.toggleEvents(EVENT_TYPES.DOUBLE_TAP, isInteractive && Boolean(doubleClickZoom));\n    this.toggleEvents(EVENT_TYPES.KEYBOARD, isInteractive && Boolean(keyboard));\n\n    // Interaction toggles\n    this.scrollZoom = scrollZoom;\n    this.dragPan = dragPan;\n    this.dragRotate = dragRotate;\n    this.doubleClickZoom = doubleClickZoom;\n    this.touchZoom = touchZoom;\n    this.touchRotate = touchRotate;\n    this.keyboard = keyboard;\n  }\n\n  toggleEvents(eventNames, enabled) {\n    if (this.eventManager) {\n      eventNames.forEach(eventName => {\n        if (this._events[eventName] !== enabled) {\n          this._events[eventName] = enabled;\n          if (enabled) {\n            this.eventManager.on(eventName, this.handleEvent);\n          } else {\n            this.eventManager.off(eventName, this.handleEvent);\n          }\n        }\n      });\n    }\n  }\n\n  /* Event handlers */\n  // Default handler for the `panstart` event.\n  _onPanStart(event) {\n    const pos = this.getCenter(event);\n    this._panRotate = this.isFunctionKeyPressed(event) || event.rightButton;\n    const newMapState = this._panRotate\n      ? this.mapState.rotateStart({pos})\n      : this.mapState.panStart({pos});\n    this.updateViewport(newMapState, NO_TRANSITION_PROPS, {isDragging: true});\n    return true;\n  }\n\n  // Default handler for the `panmove` event.\n  _onPan(event) {\n    if (!this.isDragging()) {\n      return false;\n    }\n    return this._panRotate ? this._onPanRotate(event) : this._onPanMove(event);\n  }\n\n  // Default handler for the `panend` event.\n  _onPanEnd(event) {\n    if (!this.isDragging()) {\n      return false;\n    }\n    return this._panRotate ? this._onPanRotateEnd(event) : this._onPanMoveEnd(event);\n  }\n\n  // Default handler for panning to move.\n  // Called by `_onPan` when panning without function key pressed.\n  _onPanMove(event) {\n    if (!this.dragPan) {\n      return false;\n    }\n    const pos = this.getCenter(event);\n    const newMapState = this.mapState.pan({pos});\n    this.updateViewport(newMapState, NO_TRANSITION_PROPS, {isPanning: true});\n    return true;\n  }\n\n  _onPanMoveEnd(event) {\n    if (this.dragPan) {\n      const {inertia = DEFAULT_INERTIA} = this.dragPan;\n      if (inertia && event.velocity) {\n        const pos = this.getCenter(event);\n        const endPos = [\n          pos[0] + (event.velocityX * inertia) / 2,\n          pos[1] + (event.velocityY * inertia) / 2\n        ];\n        const newControllerState = this.mapState.pan({pos: endPos}).panEnd();\n        this.updateViewport(\n          newControllerState,\n          {\n            ...LINEAR_TRANSITION_PROPS,\n            transitionDuration: inertia,\n            transitionEasing: INERTIA_EASING\n          },\n          {\n            isDragging: false,\n            isPanning: true\n          }\n        );\n        return true;\n      }\n    }\n    const newMapState = this.mapState.panEnd();\n    this.updateViewport(newMapState, null, {\n      isDragging: false,\n      isPanning: false\n    });\n    return true;\n  }\n\n  // Default handler for panning to rotate.\n  // Called by `_onPan` when panning with function key pressed.\n  _onPanRotate(event) {\n    if (!this.dragRotate) {\n      return false;\n    }\n\n    const pos = this.getCenter(event);\n    const newMapState = this.mapState.rotate({pos});\n    this.updateViewport(newMapState, NO_TRANSITION_PROPS, {isRotating: true});\n    return true;\n  }\n\n  _onPanRotateEnd(event) {\n    if (this.dragRotate) {\n      const {inertia = DEFAULT_INERTIA} = this.dragRotate;\n      if (inertia && event.velocity) {\n        const pos = this.getCenter(event);\n        const endPos = [\n          pos[0] + (event.velocityX * inertia) / 2,\n          pos[1] + (event.velocityY * inertia) / 2\n        ];\n        const newControllerState = this.mapState.rotate({pos: endPos}).rotateEnd();\n        this.updateViewport(\n          newControllerState,\n          {\n            ...LINEAR_TRANSITION_PROPS,\n            transitionDuration: inertia,\n            transitionEasing: INERTIA_EASING\n          },\n          {\n            isDragging: false,\n            isRotating: true\n          }\n        );\n        return true;\n      }\n    }\n    const newMapState = this.mapState.panEnd();\n    this.updateViewport(newMapState, null, {\n      isDragging: false,\n      isRotating: false\n    });\n    return true;\n  }\n\n  // Default handler for the `wheel` event.\n  _onWheel(event) {\n    if (!this.scrollZoom) {\n      return false;\n    }\n\n    const {speed = 0.01, smooth = true} = this.scrollZoom;\n\n    event.preventDefault();\n\n    const pos = this.getCenter(event);\n    const {delta} = event;\n\n    // Map wheel delta to relative scale\n    let scale = 2 / (1 + Math.exp(-Math.abs(delta * speed)));\n    if (delta < 0 && scale !== 0) {\n      scale = 1 / scale;\n    }\n\n    const newMapState = this.mapState.zoom({pos, scale});\n    this.updateViewport(\n      newMapState,\n      {\n        ...LINEAR_TRANSITION_PROPS,\n        transitionInterpolator: new LinearInterpolator({around: pos}),\n        transitionDuration: smooth ? 250 : 1\n      },\n      {\n        isPanning: true,\n        isZooming: true\n      }\n    );\n    return true;\n  }\n\n  // Default handler for the `pinchstart` event.\n  _onPinchStart(event) {\n    const pos = this.getCenter(event);\n    const newMapState = this.mapState.zoomStart({pos}).rotateStart({pos});\n    // hack - hammer's `rotation` field doesn't seem to produce the correct angle\n    this._startPinchRotation = event.rotation;\n    this._lastPinchEvent = event;\n    this.updateViewport(newMapState, NO_TRANSITION_PROPS, {isDragging: true});\n    return true;\n  }\n\n  // Default handler for the `pinch` event.\n  _onPinch(event) {\n    if (!this.isDragging()) {\n      return false;\n    }\n    if (!this.touchZoom && !this.touchRotate) {\n      return false;\n    }\n\n    let newMapState = this.mapState;\n    if (this.touchZoom) {\n      const {scale} = event;\n      const pos = this.getCenter(event);\n      newMapState = newMapState.zoom({pos, scale});\n    }\n    if (this.touchRotate) {\n      const {rotation} = event;\n      newMapState = newMapState.rotate({\n        deltaAngleX: this._startPinchRotation - rotation\n      });\n    }\n\n    this.updateViewport(newMapState, NO_TRANSITION_PROPS, {\n      isDragging: true,\n      isPanning: Boolean(this.touchZoom),\n      isZooming: Boolean(this.touchZoom),\n      isRotating: Boolean(this.touchRotate)\n    });\n    this._lastPinchEvent = event;\n    return true;\n  }\n\n  // Default handler for the `pinchend` event.\n  _onPinchEnd(event) {\n    if (!this.isDragging()) {\n      return false;\n    }\n    if (this.touchZoom) {\n      const {inertia = DEFAULT_INERTIA} = this.touchZoom;\n      const {_lastPinchEvent} = this;\n      if (inertia && _lastPinchEvent && event.scale !== _lastPinchEvent.scale) {\n        const pos = this.getCenter(event);\n        let newMapState = this.mapState.rotateEnd();\n        const z = Math.log2(event.scale);\n        const velocityZ =\n          (z - Math.log2(_lastPinchEvent.scale)) / (event.deltaTime - _lastPinchEvent.deltaTime);\n        const endScale = Math.pow(2, z + (velocityZ * inertia) / 2);\n        newMapState = newMapState.zoom({pos, scale: endScale}).zoomEnd();\n\n        this.updateViewport(\n          newMapState,\n          {\n            ...LINEAR_TRANSITION_PROPS,\n            transitionInterpolator: new LinearInterpolator({around: pos}),\n            transitionDuration: inertia,\n            transitionEasing: INERTIA_EASING\n          },\n          {\n            isDragging: false,\n            isPanning: Boolean(this.touchZoom),\n            isZooming: Boolean(this.touchZoom),\n            isRotating: false\n          }\n        );\n        this.blockEvents(inertia);\n        return true;\n      }\n    }\n\n    const newMapState = this.mapState.zoomEnd().rotateEnd();\n    this._state.startPinchRotation = 0;\n    this.updateViewport(newMapState, null, {\n      isDragging: false,\n      isPanning: false,\n      isZooming: false,\n      isRotating: false\n    });\n    this._startPinchRotation = null;\n    this._lastPinchEvent = null;\n    return true;\n  }\n\n  _onTriplePanStart(event) {\n    const pos = this.getCenter(event);\n    const newMapState = this.mapState.rotateStart({pos});\n    this.updateViewport(newMapState, NO_TRANSITION_PROPS, {isDragging: true});\n    return true;\n  }\n\n  _onTriplePan(event) {\n    if (!this.isDragging()) {\n      return false;\n    }\n    if (!this.touchRotate) {\n      return false;\n    }\n\n    const pos = this.getCenter(event);\n    pos[0] -= event.deltaX;\n\n    const newMapState = this.mapState.rotate({pos});\n    this.updateViewport(newMapState, NO_TRANSITION_PROPS, {isRotating: true});\n    return true;\n  }\n\n  _onTriplePanEnd(event) {\n    if (!this.isDragging()) {\n      return false;\n    }\n    if (this.touchRotate) {\n      const {inertia = DEFAULT_INERTIA} = this.touchRotate;\n      if (inertia && event.velocityY) {\n        const pos = this.getCenter(event);\n        const endPos = [pos[0], (pos[1] += (event.velocityY * inertia) / 2)];\n        const newMapState = this.mapState.rotate({pos: endPos});\n        this.updateViewport(\n          newMapState,\n          {\n            ...LINEAR_TRANSITION_PROPS,\n            transitionDuration: inertia,\n            transitionEasing: INERTIA_EASING\n          },\n          {\n            isDragging: false,\n            isRotating: true\n          }\n        );\n        this.blockEvents(inertia);\n        return false;\n      }\n    }\n    const newMapState = this.mapState.rotateEnd();\n    this.updateViewport(newMapState, null, {\n      isDragging: false,\n      isRotating: false\n    });\n    return true;\n  }\n\n  // Default handler for the `doubletap` event.\n  _onDoubleTap(event) {\n    if (!this.doubleClickZoom) {\n      return false;\n    }\n    const pos = this.getCenter(event);\n    const isZoomOut = this.isFunctionKeyPressed(event);\n\n    const newMapState = this.mapState.zoom({pos, scale: isZoomOut ? 0.5 : 2});\n    this.updateViewport(\n      newMapState,\n      Object.assign({}, LINEAR_TRANSITION_PROPS, {\n        transitionInterpolator: new LinearInterpolator({around: pos})\n      }),\n      {isZooming: true}\n    );\n    return true;\n  }\n\n  // Default handler for the `keydown` event\n  _onKeyDown(event) {\n    if (!this.keyboard) {\n      return false;\n    }\n    const funcKey = this.isFunctionKeyPressed(event);\n    const {zoomSpeed = 2, moveSpeed = 100, rotateSpeedX = 15, rotateSpeedY = 10} = this.keyboard;\n\n    const {mapStateProps} = this;\n    let newMapState;\n\n    switch (event.srcEvent.keyCode) {\n      case 189: // -\n        if (funcKey) {\n          newMapState = this.getMapState({zoom: mapStateProps.zoom - Math.log2(zoomSpeed) - 1});\n        } else {\n          newMapState = this.getMapState({zoom: mapStateProps.zoom - Math.log2(zoomSpeed)});\n        }\n        break;\n      case 187: // +\n        if (funcKey) {\n          newMapState = this.getMapState({zoom: mapStateProps.zoom + Math.log2(zoomSpeed) + 1});\n        } else {\n          newMapState = this.getMapState({zoom: mapStateProps.zoom + Math.log2(zoomSpeed)});\n        }\n        break;\n      case 37: // left\n        if (funcKey) {\n          newMapState = this.getMapState({\n            bearing: mapStateProps.bearing - rotateSpeedX\n          });\n        } else {\n          newMapState = this.mapState.pan({pos: [moveSpeed, 0], startPos: [0, 0]});\n        }\n        break;\n      case 39: // right\n        if (funcKey) {\n          newMapState = this.getMapState({\n            bearing: mapStateProps.bearing + rotateSpeedX\n          });\n        } else {\n          newMapState = this.mapState.pan({pos: [-moveSpeed, 0], startPos: [0, 0]});\n        }\n        break;\n      case 38: // up\n        if (funcKey) {\n          newMapState = this.getMapState({pitch: mapStateProps.pitch + rotateSpeedY});\n        } else {\n          newMapState = this.mapState.pan({pos: [0, moveSpeed], startPos: [0, 0]});\n        }\n        break;\n      case 40: // down\n        if (funcKey) {\n          newMapState = this.getMapState({pitch: mapStateProps.pitch - rotateSpeedY});\n        } else {\n          newMapState = this.mapState.pan({pos: [0, -moveSpeed], startPos: [0, 0]});\n        }\n        break;\n      default:\n        return false;\n    }\n    return this.updateViewport(newMapState, LINEAR_TRANSITION_PROPS);\n  }\n}\n"],"file":"map-controller.js"}